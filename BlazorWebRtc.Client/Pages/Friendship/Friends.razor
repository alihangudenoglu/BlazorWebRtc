@page "/friends"
@using BlazorWebRtc.Client.Models
@using BlazorWebRtc.Client.Models.Request
@using BlazorWebRtc.Client.Models.Response
@using BlazorWebRtc.Client.Services.Abstract
@using BlazorWebRtc.Client.Shared
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using Newtonsoft.Json
@inject IUserFriendService userFriendService
@inject HubConnection hubConnection
@inject AuthenticationStateProvider authStateProvider
@inject ILocalStorageService localStorageService
@inject IMessageService messageService

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }

    header {
        background-color: #007bff;
        padding: 1rem;
        text-align: center;
        color: white;
    }

    .friend-list {
        margin: 2rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .friend-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        transition: box-shadow 0.3s;
    }

        .friend-item:hover {
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

    .status {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .online {
        background-color: green;
    }

    .offline {
        background-color: red;
    }

    .btn {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .btn:hover {
            background-color: #0056b3;
        }

    .modal-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal {
        background-color: #fff;
        border-radius: 8px;
        padding: 20px;
        max-width: 500px;
        width: 90%;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        position: relative;
    }

        .modal h3 {
            text-align: center;
            margin-bottom: 10px;
            color: #333;
        }

    ul {
        list-style-type: none;
        padding: 0;
        max-height: 200px;
        overflow-y: auto;
        margin-bottom: 15px;
    }

    .message-item {
        display: flex;
        justify-content: space-between;
        padding: 10px;
        border-bottom: 1px solid #f0f0f0;
    }

    .message-content {
        font-weight: bold;
        color: #555;
    }

    .message-date {
        font-size: 0.9em;
        color: #888;
    }

    .message-input {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    textarea {
        width: 100%;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        font-size: 1em;
        resize: none;
    }

    .buttons {
        display: flex;
        justify-content: space-between;
    }

    .send-button, .close-button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        transition: background-color 0.3s ease;
    }

    .send-button {
        background-color: #4CAF50;
        color: white;
    }

    .close-button {
        background-color: #f44336;
        color: white;
    }

    .send-button:hover {
        background-color: #45a049;
    }

    .close-button:hover {
        background-color: #e53935;
    }


    .friend-item img {
        border-radius: 50%;
        width: 100px;
        height: 100px;
        margin-bottom: 1rem;
    }

    .message-item-right {
        display: flex;
        justify-content: flex-end;
        padding: 10px;
        background-color:#d1ffd1;
        border-radius:8px;
        margin:5px 0;
    }

    .message-item-left {
        display: flex;
        justify-content: flex-start;
        padding: 10px;
        background-color: #f0f0f0;
        border-radius: 8px;
        margin: 5px 0;
    }

</style>

<Header />

<div class="friend-list">

    @foreach (var friend in userDtos)
    {
        <div class="friend-item">
            <div>
                <img src="@GetProfilePicture(friend.ProfilePicture)" />
                <span class="status @(friend.IsOnline ?"online":"offline")">Status</span>
                @friend.UserName
            </div>
            <div>
                <button class="btn" @onclick="()=>OpenMessageModal(friend.UserId.ToString())">Send Message</button>
                <button class="btn" @onclick="()=>StartVideoCall()">Call Video</button>
            </div>
        </div>
    }

</div>

@if (IsModalOpen)
{
    <div class="modal-background">
        <div class="modal">
            <h3>send message</h3>
            <ul>
                @foreach (var message in listMessage)
                {
                    bool isCurrentUser = message.SenderUserId == Guid.Parse(loggedInUserId);

                    <li class="@(isCurrentUser ? "message-item-right" :"message-item-left")">
                        <span class="message-content">@message.MessageContent</span>
                        <span class="message-date">@message.CreateDate</span>
                    </li>
                    
                }
            </ul>
            <div>
                <textarea @bind="MessageContent" rows="5" placeholder="Please typing your message here..."></textarea>
                <br />
                <button @onclick="SendMessage">Send</button>
                <button @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
}



@code {
    private bool IsModalOpen = false;
    private string MessageContent;
    private List<UserDtoResponseModel> userDtos = new();
    private List<MessageListResponseModel> listMessage = new();
    private string UserIds;
    private bool IsOnline = false;
    private string selectedUserId;
    private string loggedInUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        loggedInUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        userDtos = await userFriendService.GetAllFriendsByUser();
        var response = await ConnectionOnSignalR();

        hubConnection.On<string, bool>("UserStatusChanged",async (UserIds, isOnline) =>
        {
            userDtos = await userFriendService.GetAllFriendsByUser();
            var desObj = JsonConvert.DeserializeObject<List<string>>(UserIds);

            var result = desObj;


            foreach (var friendOnline in userDtos)
            {
                foreach (var item in result)
                {
                    if (Guid.Parse(item) == friendOnline.UserId)
                    {
                        friendOnline.IsOnline = true;
                    }
                }
            }
            StateHasChanged();
        });
        hubConnection.On<string>("ReceiveMessage", async (MessagesContent) =>
        {
            var desObj = JsonConvert.DeserializeObject<List<MessageListResponseModel>>(MessagesContent);
            listMessage = desObj;

            StateHasChanged();
        });

    }

    private async Task<bool> ConnectionOnSignalR()
    {
        try
        {
            var token = await localStorageService.GetItemAsync<string>(Constants.LocalToken);
            if (!string.IsNullOrEmpty(token))
            {
                var authState = await authStateProvider.GetAuthenticationStateAsync();

                var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                hubConnection = new HubConnectionBuilder().WithUrl($"https://localhost:7151/userhub?userId={userId}", async opt =>
                {
                    opt.Transports = HttpTransportType.WebSockets | HttpTransportType.LongPolling;
                }).Build();

                await hubConnection.StartAsync();

            }
            return true;
        }
        catch (Exception ex)
        {

            throw ex;
        }


    }

    private async Task OpenMessageModal(string userId)
    {
        IsModalOpen = true;
        MessageContent = "";

        MessageQueryModel messageModel = new();
        messageModel.MessageUserId=userId;
        selectedUserId = userId;
        listMessage = await messageService.GetMessageList(messageModel);

    }
    private void CloseModal()
    {
        IsModalOpen = false;
    }
    private void StartVideoCall()
    {

    }

    private async Task SendMessage()
    {
        SendMessageModel messageModel=new();
        messageModel.MessageContent = MessageContent;
        messageModel.ReceiverUserId = selectedUserId;

        var result = await messageService.SendMessage(messageModel);

        if (result)
        {
            await OpenMessageModal(selectedUserId);
        }



    }
    private string GetProfilePicture(string profilePicturePath)
    {
        return $"https://localhost:7151/{profilePicturePath}";
    }

}
