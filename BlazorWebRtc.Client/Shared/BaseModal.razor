@using BlazorWebRtc.Client.Models.Request
@using BlazorWebRtc.Client.Services.Abstract
@inject IRequestService requestService
@inject IJSRuntime JS

<style>
    .modal-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal {
        background: white;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
        max-width: 500px;
        width: 90%;
        animation: slide-in 0.3s ease;
    }

    h3 {
        margin-bottom: 1rem;
        color: #007bff;
        text-align: center;
    }

    ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid #e0e0e0;
    }

    button {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-success {
        background-color: #28a745;
        color: #fff;
        border: none;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        transition: ease;
    }

    .btn-warning {
        background-color: #8B8000;
        color: #fff;
        border: none;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        transition: ease;
    }

        button:hover {
            background-color: #0056b3;
        }

        button.close {
            background-color: #dc3545;
        }

            button.close:hover {
                background-color: #c82333;
            }
</style>

@if (IsOpen)
{
    <div class="modal-background"> 
        <div class="modal">
            <h3>Friendship Requests</h3>
            <ul>
                @foreach (var request in Requests)
                {
                    <li>
                        @request.UserName
                        <button class="btn-success btn" @onclick="()=>SendRequest(Status.accept,request.Id)">Accept</button>
                        <button class="btn-warning btn" @onclick="()=>SendRequest(Status.denied,request.Id)">Reject</button>
                    </li>
                }

            </ul>
            <button @onclick="CloseModal">Close</button>
        </div>
    </div>
}



@code {
    [Parameter]
    public bool IsOpen { get; set; }
    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }
    [Parameter]
    public List<GetRequestFriendshipList> Requests { get; set; }
    [Parameter]
    public EventCallback<bool> RefreshRequestList { get; set; }

    private async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    private async Task SendRequest(Status status,string requestId)
    {
        UpdateRequestModel updateRequestModel = new UpdateRequestModel();
        updateRequestModel.Status = status;
        updateRequestModel.RequestId = requestId;
        var result = await requestService.UpdateRequest(updateRequestModel);

        if (result.IsSuccess)
        {
            IsOpen = false;
            await IsOpenChanged.InvokeAsync(IsOpen);

        }
        else
        {
            IsOpen = false;
            await IsOpenChanged.InvokeAsync(IsOpen);
        }
        await RefreshRequestList.InvokeAsync();
        await JS.InvokeVoidAsync("toastrNotify", "success", status == Status.accept ? "Accepted" : "Rejected", "Success Process");

    }

}
