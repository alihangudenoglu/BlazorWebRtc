@using BlazorWebRtc.Client.Models.Request
@using BlazorWebRtc.Client.Services.Abstract
@using Microsoft.AspNetCore.Components.Authorization
@inject IAccountService accountService
@inject IRequestService requestService
@inject NavigationManager navigationManager

<style>
    header {
        background-color: #007bff;
        padding: 1rem;
        text-align: center;
    }

    nav ul {
        list-style: none;
        display: flex;
        justify-content: center;
        gap: 1.5rem;
    }

        nav ul li a {
            color: white;
            text-decoration: none;
            font-size: 1.2rem;
        }
</style>

<header>
    <nav>
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="" @onclick="@OpenModal">Notifications(@requestCount)</a></li>

            <AuthorizeView>
                <Authorized>

                    <li><a href="/friends">Friends</a></li>
                    <li><a href="/"> @context.User.Identity.Name</a></li>

                    <li><a @onclick="@Logout" href="#">Logout</a></li>
                </Authorized>

                <NotAuthorized>
                    <li><a href="/login">Login</a></li>
                    <li><a href="/register">Register</a></li>
                </NotAuthorized>
            </AuthorizeView>

        </ul>
    </nav>
</header>

<BaseModal IsOpen="@IsModalOpen" IsOpenChanged="@((value) => IsModalOpen = value)" Requests="@getRequests" RefreshRequestList="@OnInitializedAsync"/>

@code {
    private int requestCount;
    public bool IsModalOpen = false;
    private List<GetRequestFriendshipList> getRequests = new List<GetRequestFriendshipList>();

    private async Task Logout()
    {
        await accountService.Logout();
        navigationManager.NavigateTo("/");
    }

    private async Task OpenModal()
    {
        getRequests = await requestService.GetFriendshipRequest();
        IsModalOpen = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await requestService.GetFriendshipRequest();
        requestCount = result.Count;
    }
}
